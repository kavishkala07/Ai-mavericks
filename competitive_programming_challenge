from flask import Flask, render_template, redirect, url_for, request
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    role = db.Column(db.String(50), nullable=False)  # 'admin', 'participant', 'judge'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

def role_required(role):
    def wrapper(fn):
        @login_required
        def decorated_view(*args, **kwargs):
            if current_user.role != role:
                return "Access Denied", 403
            return fn(*args, **kwargs)
        return decorated_view
    return wrapper

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username, password=password).first()
        if user:
            login_user(user)
            return redirect(url_for('dashboard'))
        return "Invalid credentials"
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    return f"Welcome, {current_user.username}. Role: {current_user.role}"

@app.route('/admin')
@role_required('admin')
def admin():
    return "Admin Panel"

@app.route('/participant')
@role_required('participant')
def participant():
    return "Participant Page"

@app.route('/judge')
@role_required('judge')
def judge():
    return "Judge Page"

def seed_database():
    if not User.query.first():
        users = [
            User(username='admin', password='adminpass', role='admin'),
            User(username='participant1', password='participantpass', role='participant'),
            User(username='judge1', password='judgepass', role='judge')
        ]
        db.session.bulk_save_objects(users)
        db.session.commit()
        print("Database seeded with initial users.")

if __name__ == '__main__':
    db.create_all()
    seed_database()
    app.run(debug=True)
